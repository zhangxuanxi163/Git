public class Main {
public static void main(String args[]) {
          Student s1 = new Student();
          s1.setName("张同学");
          s1.setAge(20);
          s1.show();
          Student s2 = new Student("王芳",22,"计算机系");
          s2.show();
     }
}
class Person {
      private String name;
      private int age;
      public Person() {
          System.out.println("调用了父类无参的构造方法");
      }
      public Person(String name,int age) {
          System.out.println("调用了父类有参的构造方法");
          this.name = name;
          this.age = age;
      }
      public void setName(String name) {
          this.name = name;
      }
      public void setAge(int age) {
          this.age = age;
      }
      public void show() {
          System.out.println("姓名："+name+"  年龄："+age);
      }
}
class Student extends Person {
     private String department;
     public Student() {
             System.out.println("调用了子类无参构造方法");
     }
     public Student(String name,int age,String department) {
             super(name,age);
             this.department = department;
             System.out.println("调用了子类有参构造方法");
     }   
}

A、
调用了父类无参的构造方法
调用了子类无参构造方法
姓名：张同学  年龄：20
调用了父类有参的构造方法
调用了子类有参构造方法
姓名：王芳  年龄：22


B、
姓名：张同学  年龄：20
姓名：王芳  年龄：22


C、
调用了子类无参构造方法
姓名：张同学  年龄：20
调用了子类有参构造方法
姓名：王芳  年龄：22


D、
调用了父类无参的构造方法
姓名：张同学  年龄：20
调用了父类有参的构造方法
姓名：王芳  年龄：22

解答：
让我们一步一步分析程序的执行过程，理解各个构造方法的调用顺序。

程序分析
Person 类：

Person 类有两个构造方法：
无参构造方法：打印 "调用了父类无参的构造方法"。
有参构造方法：接受 name 和 age 作为参数，打印 "调用了父类有参的构造方法"，并将 name 和 age 赋值给类的成员变量。
Student 类：

Student 类继承了 Person 类。它有两个构造方法：
无参构造方法：打印 "调用了子类无参构造方法"，默认调用父类的无参构造方法。
有参构造方法：接受 name、age 和 department 作为参数。它先调用父类的有参构造方法，并打印 "调用了父类有参的构造方法"，然后初始化 department，并打印 "调用了子类有参构造方法"。
Main 类的 main 方法：

Student s1 = new Student();
这是调用 Student 类的无参构造方法。由于 Student 类的无参构造方法调用了父类的无参构造方法，首先会调用父类的无参构造方法，然后打印 "调用了子类无参构造方法"。接着，s1 对象的 setName 和 setAge 方法被调用，打印出 "姓名：张同学 年龄：20"。
Student s2 = new Student("王芳", 22, "计算机系");
这是调用 Student 类的有参构造方法，传递了 name、age 和 department。该构造方法会先调用父类的有参构造方法，打印出 "调用了父类有参的构造方法"，然后继续初始化 department，并打印 "调用了子类有参构造方法"。最后，打印出 "姓名：王芳 年龄：22"。
构造方法调用顺序：
创建 s1 时：

调用 Student 类的无参构造方法 → 调用父类的无参构造方法 → 打印 "调用了父类无参的构造方法"
Student 类的无参构造方法执行完毕 → 打印 "调用了子类无参构造方法"
然后 s1.setName("张同学") 和 s1.setAge(20) 被调用，最后输出 "姓名：张同学 年龄：20"
创建 s2 时：

调用 Student 类的有参构造方法 → 调用父类的有参构造方法 → 打印 "调用了父类有参的构造方法"
然后执行子类的初始化操作，打印 "调用了子类有参构造方法"
最后输出 "姓名：王芳 年龄：22"
最终输出：
复制代码
调用了父类无参的构造方法
调用了子类无参构造方法
姓名：张同学  年龄：20
调用了父类有参的构造方法
调用了子类有参构造方法
姓名：王芳  年龄：22